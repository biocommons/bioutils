[project]
name = "bioutils"
authors = [
  { name="biocommons contributors", email="biocommons-dev@googlegroups.com" },
]
description = "miscellaneous simple bioinformatics utilities and lookup tables"
readme = "README.rst"
license = { file="LICENSE.txt" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Medical Science Apps."
]
keywords = [
    "biocommons",
    "bioinformatics",
    "genomics",
    "HGVS",
    "variation"
]
dynamic = ["version"]
dependencies = [
    "attrs",
    "requests",
]

[project.optional-dependencies]
dev = [
    "bandit~=1.7",
    "build~=0.8",
    "flake8~=4.0",
    "ipython~=8.4",
    "isort~=5.10",
    "mypy",
    "pylint~=2.14",
    "ruff == 0.4.4",
]
test = [
    "pytest~=7.1",
    "pytest-cov~=4.0",
    "pytest-optional-tests",
    "tox~=3.25",
    "vcrpy",
]
docs = ["mkdocs"]

[project.urls]
"Homepage" = "https://github.com/biocommons/bioutils"
"Bug Tracker" = "https://github.com/biocommons/bioutils/issues"

[build-system]
requires = ["setuptools >= 70.1", "setuptools_scm[toml] ~= 8.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"*" = ["_data/*/*.json.gz"]

[tool.setuptools_scm]

[tool.pytest.ini_options]
addopts = "-s -v -x --strict-markers -m 'not extra' --doctest-modules --cov=src"
doctest_optionflags = [
    "ALLOW_BYTES",
    "ALLOW_UNICODE",
    "ELLIPSIS",
    "IGNORE_EXCEPTION_DETAIL",
    "NORMALIZE_WHITESPACE",
]
markers = [
    "network: tests that require network connectivity",
    "slow: slow tests that should be run infrequently",
]
testpaths = [
  "tests"
]

[tool.coverage.run]
branch = true
source = ["biocommons.example"]
omit = ["*_test.py", "*/tests/*"]


[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]

[tool.isort]
profile = "black"

# [tool.flake8]
# flake8 does not support configuration in pyproject.toml
# https://github.com/PyCQA/flake8/issues/234#issuecomment-812800832
# The config in setup.cfg

[tool.pylint.'MESSAGES CONTROL']
disable = "R0913"


[tool.pylint.format]
max-line-length = "120"


[tool.ruff]
src = ["src", "tests"]
line-length = 120
