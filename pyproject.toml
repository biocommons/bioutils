[project]
name = "bioutils"
authors = [
  { name="biocommons contributors", email="biocommons-dev@googlegroups.com" },
]
description = "miscellaneous simple bioinformatics utilities and lookup tables"
readme = "README.rst"
license = { file="LICENSE.txt" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Medical Science Apps."
]
keywords = [
    "biocommons",
    "bioinformatics",
    "genomics",
    "HGVS",
    "variation"
]
dynamic = ["version"]
dependencies = [
    "attrs",
    "requests",
]

[project.optional-dependencies]
dev = [
    "build~=0.8",
    "ipython~=8.4",
    "pre-commit >= 4.2.0",
    "ruff == 0.12.8",
]
test = [
    "pytest~=7.1",
    "pytest-cov~=4.0",
    "tox~=3.25",
    "vcrpy",
]
docs = ["mkdocs"]

[project.urls]
"Homepage" = "https://github.com/biocommons/bioutils"
"Bug Tracker" = "https://github.com/biocommons/bioutils/issues"

[build-system]
requires = ["setuptools >= 70.1", "setuptools_scm[toml] ~= 8.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"*" = ["_data/*/*.json.gz"]

[tool.setuptools_scm]

[tool.pytest.ini_options]
addopts = "-s -v -x --strict-markers -m 'not extra' --doctest-modules --cov=src"
doctest_optionflags = [
    "ALLOW_BYTES",
    "ALLOW_UNICODE",
    "ELLIPSIS",
    "IGNORE_EXCEPTION_DETAIL",
    "NORMALIZE_WHITESPACE",
]
markers = [
    "network: tests that require network connectivity",
    "slow: slow tests that should be run infrequently",
]
testpaths = [
  "tests"
]

[tool.coverage.run]
branch = true
source = ["biocommons.example"]
omit = ["*_test.py", "*/tests/*"]


[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
]

[tool.ruff]
src = ["src", "tests"]
line-length = 100
exclude = [
    "bin",
    "sbin",
    "docs",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # not used
    "AIR",
    "ERA",
    "FAST",
    "YTT",
    "FBT",
    "CPY",
    "DJ",
    "EM",
    "EXE",
    "FIX",
    "FA",
    "INT",
    "PYI",
    "TID",
    "TD",
    "TC",
    "C90",
    "NPY",
    "PD",
    # ignore for compatibility with formatter
    "D206",
    "D300",
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "W191",
    "S321",
    "COM812",
    # don't require types on *args, **kwargs
    "ANN002",
    "ANN003",
    # subjective pylint thresholds
    "PLR0904",
    "PLR091",
    "PLR1702",
    # excessive docstring requirements
    "D105",
    "D205",
    "D203",
    "D213",  # conflicts with D212
    "D400",
    "D401",
    "D403",
    "D415",
    # excessive type ignore requirements
    "PGH003",
    # kinda hairy to sort out
    "PLC0206",
    # maybe good to work on someday, but low priority
    "TRY003",
]

[tool.ruff.lint.per-file-ignores]
# ANN001 - missing-type-function-argument
# ANN2 - missing-return-type
# D100 - undocumented-public-module
# D102 - undocumented-public-class
# D103 - undocumented-public-function
# S101 - assert
# B011 - assert-false
# INP001 - implicit-namespace-package
# PLR2004 - magic-value-comparison
"tests/*" = [
    "ANN001",
    "ANN2",
    "D10",
    "S101",
    "B011",
    "INP001",
    "PLR2004",
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.format]
docstring-code-format = true
